#summary Overview of the RSeries Logic Engine system.

= Introduction =
The RSeries Logic Engine combines Arduino, RGB LEDs and fiber-optics to accurately emulate the color-wheel logic patterns seen in the original Star Wars trilogy.

At it's heart is an AVR Board (with Arduino Uno bootloader) which runs a series of WS2812B LEDs. These RGB LEDs cross-fade between set colors. For example the Front logic LEDs fade from black to blue to white and back again. As it arrives at each "key" color, that LED is paused for a random length of time - this creates constantly evolving color patterns that appear almost random at first glance.

Fiber-optic cable is used to route the light from each LED to specific 'pixels' on the logic bezel, which is what is finally seen on your droid. 

= Assembly =
== Overview ==
The circuit boards come fully assembled, but you'll need to spend a little time putting them together with the fiber optics before they're ready to be installed in your dome. Assembly is simple, but can take a little time so set an evening aside to get everything together. The general procedure is...

 # Inner screen, inner bezel and outer bezel are attached to the LED boards using screws and spacers.
 # Fiber-optic cable is threaded through the outer bezel and into the inner bezel so it points directly at an LED.
 # Once positioned the fiber-optic cable is trimmed to size at the outer bezel. A sharp wire-cutter should be used here to trim the end of the fiber flush with the bezel.
 # With all fiber-optics placed the AVR board is mounted to the back of the LED board and we're done!

=== `*` <font color=red>Important Assembly Notes</font> `*` ===
<font color=red>
*!* The plastic bezels are laser-cut and holes have a slight taper. This results in "fiber holes" that are slightly larger in diameter on one side. When assembling the bezels & screens these larger holes should face outward to make inserting the fiber-optic cable simpler. Bezels are _NOT symmetric_, so double check that you have them oriented the correct way up and correct way out.

*!* The screws used to space the outer bezel away from the inner bezel should not protrude beyond the outer bezel. If you find that the end of your screws do poke out beyond the plastic of the outer bezel, dis-assemble and add some washers to increase spacing before you start placing any fiber-optics. If left protruding these screws can clash with the mounting hardware of the rear logic surround in the dome and cause you headaches down the line.

*!* Mounting the AVR board to the back of an LED board can create a short if not done carefully. To be safe, trim down the back of the soldered Teeces pins so they're almost flush with the PCB surface, then cover them with a small piece of electrical tape. You may want to do the same with the OUT pins of the LED boards as an extra precaution.
</font>

== Front Master ==
This is the upper front logic and connects directly to the AVR Board. The LED board has two sets of 3 pins; one set labeled *IN* and another labeled *OUT*. It is intended to mount the AVR Board directly to the back of the LED board, however during assembly it is safer so connect the AVR board to the LED board using one of the 3-wire cables.

*Hardware Required:*
 * (2) 35mm M3 screws
 * (2) 3/4" spacers
 * (2) 1/8" spacers
 * (X) washers
 * (2) M3 threaded brass inserts

Line up all the plastic parts with the LED PCB (the one with two sets of pins) to ensure they're all the correct way up. 

Determine which side of the outer bezel will face out; we'll call this the front surface. Remove any paper liner from the front surface. Flip the bezel around so the back surface is facing up, then place the two brass inserts into their holes. Push them into place with some light force - a pliers may be used to squeeze them into place.

Place plastic washers on both 35mm screws and position the screws through the PCB, inner screen and inner bezel. Stack two washers, one 1/8" spacer and one 3/4" spacer onto each screw.

A small needle-nose pliers or strong tweezers can be used to position the fiber-optic cable into the inner bezel. Use a sharp flush-cutter to trim the fiber-optic cable as close to the bezel as possible. After trimming the end of the remaining cable may appear "pinched" from the cutter so it may be necessary to trim a tiny portion of cable to ensure light can get to all the fiber ends.

== Front Slave ==
This is the lower front logic display. Assembly procedure is identical to the upper front logic. Once assembled, the Front Slave is connected to the Front Master using the short 3-wire jumper cable.

== Rear ==
Again, while assembling the rear logic it is safer to leave the AVR board detached from the LED boards. The AVR board can be connected to the LED board during assembly using a 3-pin cable. Once the fiber-optics are in place the AVR board can be mounted to the back of the LED boards if you so wish.

The fiber optic cables on the rear should be placed in a specific way to ensure that everyone has their logics mapped identically. To make this simpler I have built in a 'Testpattern Mode' into the code. On the Rear AVR board, remove the S3 jumper (if it exists) and turn the DELAY trimmer completely counter-clockwise. Restart and you should see a color pattern like this for a few minutes (you may need to reset the AVR board occasionally to get back to this pattern during assembly)...

[https://rseries-open-control.googlecode.com/svn/trunk/Media/Misc/LEwiki/rld_pattern.png]

Now, starting from the center and working outwards, fibers should be routed through the outer bezel and into the inner bezel so the color pattern on the outer bezel ends up looking like this...

[https://rseries-open-control.googlecode.com/svn/trunk/Media/Misc/LEwiki/rld_patternbez.png]

The outer-most fibers shown in blue and pink will be the trickiest to position, so take extra care (and time) with those. Again, a small needle-nose pliers or strong tweezers can come in very useful when positioning the fibers.

== Mounting To Logic Surrounds ==
*Hardware Required:*
 * (14) M3 set screws (12mm or 16mm long)
 * (14) M3 hex nuts

Screw the set screws into the mounting holes of the logic surrounds (4 for each front logic, 6 for the rear logic). Tighten using a 1.5mm hex key. If the set screws appear a little loose in the surround you may want to use a drop of threadlocker fluid.

Place the clear screen over the set screws, then position the logic engine assembly in place. The set screws will go through the outer bezel, leaving enough thread to be secured with the hex nuts. The hex nuts can prove to be very tricky to place and tighten - it may help to find someone with small fingers and bribe them into helping. Another trick is to hook the nut onto the end of your 1.5mm hex key, then place the key onto the set screw; this prevents the nut from falling while to you and position and tighten it.

[https://rseries-open-control.googlecode.com/svn/trunk/Media/Misc/Logic_Engine_Parts.png]
----
= Powering =
The AVR board features an efficient regulator module that is capable of supplying plenty of current (up to 2.25A) to the AVR and LED boards. It can take an input voltage between +6V and +17V, so you can safely connect power from a 12V battery.

[https://rseries-open-control.googlecode.com/svn/trunk/Media/Misc/LEwiki/avr_powering.png]

= Standard Settings =

The AVR board can be set to produce standard R2-D2 logic colors and speeds for both the Front (FLD) and Rear (RLD) Logic Displays.

[https://rseries-open-control.googlecode.com/svn/trunk/Media/Misc/LEwiki/avr_mode.png]

By default the AVR board will output FLD colors (black, blues, whites) & speeds. Placing a jumper/shunt on the *S4* pin switches it to RLD mode (slower black, greens, yellows, reds).

= Custom Settings =
The *BRIGHT* and *COLOR* trimpots on the AVR board are used to adjust global brightness and hue values of all LEDs.

Using a small screwdriver to turn the *BRIGHT* trimpot completely counter-clockwise sets the LEDs to their darkest levels (ie black). Turning the *BRIGHT* trimpot slowly clockwise will increase brightness until the maximum brightness is achieved. This maximum brightness value is set to 50% of the LED's possible brightness. This limit is in place to keep current consumption and heat generation down, and also to prevent anyone from being blinded (they're insanely bright at 100%!!). A custom settings file on the microSD card can be used to bypass this safety feature and get 100% brightness - this not recommended for long periods of time so do so at your own risk.

Similarly turning the *COLOR* trimpot completely counter-clockwise sets the color palette to their default hues (FLD will be black/blue/white, RLD will be black/green/yellow/red). Slowly turning the *COLOR* trimpot clockwise will shift the hues of all colors through the full color spectrum, finally arriving at the same default hues again when turned completely clockwise. 

[https://rseries-open-control.googlecode.com/svn/trunk/Media/Misc/LEwiki/avr_speed.png]

Additionally, if different speeds are desired a jumper can be placed on the *S3* pin to enable the *DELAY* and *FADE* trimpots. Delay controls how long each key color is paused for. Fade controls how long each "tween" color is paused for - this adjusts how long each key color takes to cross-fade into the next color. When turned completely counter-clockwise the LEDs will behave fastest, turning clockwise slows the LEDs.

Additional custom settings (such as specific color palettes) may be set by editing the settings.txt file on the microSD card. The microSD card is optional and not needed for basic functionality.

[https://rseries-open-control.googlecode.com/svn/trunk/Media/Misc/LEwiki/avr_microsd.png]

= Reprogramming =
For basic functionality, the AVR board should never need to be reprogrammed. If, however, a future update should be released or you just like to play with the code, the AVR board can be reprogrammed using the Arduino IDE and an FTDI adapter. In the Arduino IDE software you should select 'Arduino UNO' from the Tools->Board menu.

[https://rseries-open-control.googlecode.com/svn/trunk/Media/Misc/LEwiki/avr_ftdi.png]

The basic Arduino sketches are available on the repository [https://code.google.com/p/rseries-open-control/source/browse/trunk#trunk%2FSoftware%2FLogicEngine here].

= Development Notes =
This system is basically an Arduino running a bunch of WS2812B LEDs. WS2812B's require only one data wire from a microcontroller to run dozens (maybe hundreds) of the RGB LEDs. We use functions from the [https://code.google.com/p/fastspi FastSPI_LED2 Library] to control all the LEDs, assigning them HSV (Hue Saturation Value) color values and address each LED in the order it is wired.

In order to pack all the LEDs to closely on the PCBs, they have been wired in a serpentine configuration. Each LED board has 48 LEDs. For the Front Logic two boards are connected via a 3-pin jumper cable and the top row of LEDs is unused on each logic. For the Rear Logic two boards are soldered together side-by-side and all 96 LEDs are used. These odd configurations are simplified in the software by mapping the physical LED numbers to typical matrix numbering.

<a href="https://rseries-open-control.googlecode.com/svn/trunk/Media/Misc/Logic-Engine-LED-board-front.png">
<img src="https://rseries-open-control.googlecode.com/svn/trunk/Media/Misc/Logic-Engine-LED-board-front.png" width="210">
<a href="https://rseries-open-control.googlecode.com/svn/trunk/Media/Misc/Logic-Engine-LED-board-rear.png">
<img src="https://rseries-open-control.googlecode.com/svn/trunk/Media/Misc/Logic-Engine-LED-board-rear.png" width="400">

= Where'd this come from? =
These logics are the result of a couple of years of tinkering and development. The Teeces logics are great, but the PWM fading seen in JEDI logics was always a much sought after feature. I worked with John (Teeces) for some time to come up with a method of making fadeable logics. We discovered that it may be possible via software PWM, but would require whole new logic boards. I then discovered that by using bi-color LEDs we could have LEDs fade between colors, much like the original trilogy logics - however, the LEDs couldn't be placed close enough to each other so fiber optic cable was required to get correct spacing. Then I discovered Rainbowduino's and built [https://www.youtube.com/watch?v=Z9KnvJx7TDs those RGB logics seen at DroidCon2]. There, Michael Erwin and Brett Bourbin convinced me to rework the design from scratch to better suit our needs - in doing so the RSeries Logic Engine was born.